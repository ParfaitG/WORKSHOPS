theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
setwd('/home/parfaitg/Documents/MISC/DATA/METRA')
# ASSETS
metra_assets <- read.csv('MetraAssets.csv', stringsAsFactors = FALSE)
# FUNDING
metra_funding <- read.csv('MetraFunding.csv', stringsAsFactors = FALSE)
# REVENUES
metra_revenues <- read.csv('MetraRevenues.csv', stringsAsFactors = FALSE)
metra_revenues <- within(subset(metra_revenues, !is.na(Category) | Category != ''), {
Budget <- as.numeric(metra_revenues$Final.Budget)
Actual <- as.numeric(metra_revenues$Actual)
Revenue_Type <- ifelse(grepl("Loss before depreciation", Revenue_Type),
"Loss before depreciation, financial assistance, and leasehold-related",
Revenue_Type)
Final.Budget <- NULL
})
# RIDERSHIP
metra_ridership <- read.csv('MetraRidership.csv', stringsAsFactors = FALSE)
agg_assets <- aggregate(End_Balance ~ Asset_Type, metra_assets, FUN=sum)
agg_assets
agg_funding <- aggregate(Amount ~ Funding_Source, metra_funding, FUN=sum)
agg_funding
agg_revenues <-aggregate(Actual ~ Revenue_Type, metra_revenues, FUN=sum)
agg_revenues
agg_rides <- aggregate(Rides ~ Rail_Line, metra_ridership, FUN=sum)
agg_rides
agg_revenues <- aggregate(cbind(Actual, Budget) ~ Year + Revenue_Type, metra_revenues, FUN=sum)
ggplot(subset(agg_revenues, grepl("^((?!Total).)*$", Revenue_Type, perl=TRUE)),
aes(Year, Actual, color=Revenue_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Revenues - Amount", x="Year", y="Amount") +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
long_revenues <- rbind(transform(agg_revenues[, c(1:3)],
Amount_Type = 'Actual', Amount = Actual, Actual = NULL),
transform(agg_revenues[, c(1:2,4)],
Amount_Type = 'Budget', Amount = Budget, Budget = NULL))
ggplot(subset(long_revenues, grepl("Total", Revenue_Type)),
aes(Year, Amount, fill=Amount_Type)) +
geom_col(position = "dodge") +
labs(title="Metra Amount Types - Totals", x="Year", y="Amount") +
guides(fill=guide_legend(nrow=1)) +
scale_x_continuous(breaks=unique(long_revenues$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_fill_manual(values = seaborn_palette) +
theme(legend.position="top",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
ggplot(subset(long_revenues, grepl("Total", Revenue_Type)), aes(Year, Amount, fill=Amount_Type)) +
geom_col(position = "dodge") +
labs(title="Metra Amount Types - Totals", x="Year", y="Amount") +
guides(fill=guide_legend(nrow=1)) +
scale_x_continuous(breaks=unique(long_revenues$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_fill_manual(values = seaborn_palette) +
theme(legend.position="top",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5)) +
facet_wrap(~Revenue_Type, ncol=2)
ggplot(subset(long_revenues, grepl("Total", Revenue_Type)), aes(Year, Amount, fill=Amount_Type)) +
geom_col(position = "dodge") +
labs(title="Metra Amount Types - Totals", x="Year", y="Amount") +
guides(fill=guide_legend(nrow=1)) +
scale_x_continuous(breaks=unique(long_revenues$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_fill_manual(values = seaborn_palette) +
theme(legend.position="top",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5)) +
facet_wrap(~Revenue_Type, ncol=2, scales='free')
setwd('/home/parfaitg/Documents/MISC/DATA/METRA')
# ASSETS
metra_assets <- read.csv('MetraAssets.csv', stringsAsFactors = FALSE)
# FUNDING
metra_funding <- read.csv('MetraFunding.csv', stringsAsFactors = FALSE)
# REVENUES
metra_revenues <- read.csv('MetraRevenues.csv', stringsAsFactors = FALSE)
metra_revenues <- within(subset(metra_revenues, !is.na(Category) | Category != ''), {
Budget <- as.numeric(metra_revenues$Final.Budget)
Actual <- as.numeric(metra_revenues$Actual)
Revenue_Type <- ifelse(grepl("Loss before depreciation", Revenue_Type),
"Loss before depreciation, financial assistance, and leasehold-related",
Revenue_Type)
Final.Budget <- NULL
})
# RIDERSHIP
metra_ridership <- read.csv('MetraRidership.csv', stringsAsFactors = FALSE)
agg_assets <- aggregate(End_Balance ~ Asset_Type, metra_assets, FUN=sum)
agg_assets
agg_funding <- aggregate(Amount ~ Funding_Source, metra_funding, FUN=sum)
agg_funding
agg_revenues <-aggregate(Actual ~ Revenue_Type, metra_revenues, FUN=sum)
agg_revenues
agg_rides <- aggregate(Rides ~ Rail_Line, metra_ridership, FUN=sum)
agg_rides
agg_revenues <- aggregate(cbind(Actual, Budget) ~ Year + Revenue_Type, metra_revenues, FUN=sum)
ggplot(subset(agg_revenues, grepl("^((?!Total).)*$", Revenue_Type, perl=TRUE)),
aes(Year, Actual, color=Revenue_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Revenues - Amount", x="Year", y="Amount") +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
long_revenues <- rbind(transform(agg_revenues[, c(1:3)],
Amount_Type = 'Actual', Amount = Actual, Actual = NULL),
transform(agg_revenues[, c(1:2,4)],
Amount_Type = 'Budget', Amount = Budget, Budget = NULL))
ggplot(subset(long_revenues, grepl("Total", Revenue_Type)),
aes(Year, Amount, fill=Amount_Type)) +
geom_col(position = "dodge") +
labs(title="Metra Amount Types - Totals", x="Year", y="Amount") +
guides(fill=guide_legend(nrow=1)) +
scale_x_continuous(breaks=unique(long_revenues$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_fill_manual(values = seaborn_palette) +
theme(legend.position="top",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
ggplot(subset(long_revenues, grepl("Total", Revenue_Type)), aes(Year, Amount, fill=Amount_Type)) +
geom_col(position = "dodge") +
labs(title="Metra Amount Types - Totals", x="Year", y="Amount") +
guides(fill=guide_legend(nrow=1)) +
scale_x_continuous(breaks=unique(long_revenues$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_fill_manual(values = seaborn_palette) +
theme(legend.position="top",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5)) +
facet_wrap(~Revenue_Type, ncol=2)
dollar(10^(1:8))
?comma
agg_assets <- transform(aggregate(End_Balance ~ Asset_Type, metra_assets, FUN=sum),
End_Balance = scales::dollar(End_Balance))
agg_assets
agg_funding <- transform(aggregate(Amount ~ Funding_Source, metra_funding, FUN=sum),
Amount = scales::dollar(Amount))
agg_funding
agg_revenues <-transform(aggregate(Actual ~ Revenue_Type, metra_revenues, FUN=sum),
Revenues = scales::dollar(Revenues))
agg_assets <- transform(aggregate(End_Balance ~ Asset_Type, metra_assets, FUN=sum),
End_Balance = scales::dollar(End_Balance))
agg_assets
agg_funding <- transform(aggregate(Amount ~ Funding_Source, metra_funding, FUN=sum),
Amount = scales::dollar(Amount))
agg_funding
agg_revenues <-transform(aggregate(Actual ~ Revenue_Type, metra_revenues, FUN=sum),
Actual = scales::dollar(Revenues))
agg_assets <- transform(aggregate(End_Balance ~ Asset_Type, metra_assets, FUN=sum),
End_Balance = scales::dollar(End_Balance))
agg_assets
agg_funding <- transform(aggregate(Amount ~ Funding_Source, metra_funding, FUN=sum),
Amount = scales::dollar(Amount))
agg_funding
agg_revenues <-transform(aggregate(Actual ~ Revenue_Type, metra_revenues, FUN=sum),
Actual = scales::dollar(Actual))
agg_revenues
agg_rides <- transform(aggregate(Rides ~ Rail_Line, metra_ridership, FUN=sum),
Rides = scales::comma(Rides)
agg_rides
agg_assets <- transform(aggregate(End_Balance ~ Asset_Type, metra_assets, FUN=sum),
End_Balance = scales::dollar(End_Balance))
agg_assets
agg_funding <- transform(aggregate(Amount ~ Funding_Source, metra_funding, FUN=sum),
Amount = scales::dollar(Amount))
agg_funding
agg_revenues <-transform(aggregate(Actual ~ Revenue_Type, metra_revenues, FUN=sum),
Actual = scales::dollar(Actual))
agg_revenues
agg_rides <- transform(aggregate(Rides ~ Rail_Line, metra_ridership, FUN=sum),
Rides = scales::comma(Rides))
agg_rides
16*10
agg_assets <- aggregate(End_Balance ~ Year + Asset_Type, metra_assets, FUN=sum)
ggplot(subset(agg_assets, grepl("^((?!Total).)*$", Asset_Type, perl=TRUE)),
aes(Year, End_Balance, color=Asset_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Asset Types - End Balance", x="Year", y="End Balance") +
guides(fill=guide_legend(nrow=2)) +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
ggplot(subset(agg_assets, grepl("Total", Asset_Type)),
aes(Year, End_Balance, color=Asset_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Asset Types - End Balance", x="Year", y="End Balance") +
guides(fill=guide_legend(nrow=2)) +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5)) +
facet_wrap(~Asset_Type)
agg_assets <- aggregate(End_Balance ~ Year + Asset_Type, metra_assets, FUN=sum)
ggplot(subset(agg_assets, grepl("^((?!Total).)*$", Asset_Type, perl=TRUE)),
aes(Year, End_Balance, color=Asset_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Asset Types - End Balance", x="Year", y="End Balance") +
guides(color=guide_legend(nrow=2)) +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
ggplot(subset(agg_assets, grepl("Total", Asset_Type)),
aes(Year, End_Balance, color=Asset_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Asset Types - End Balance", x="Year", y="End Balance") +
guides(color=guide_legend(nrow=2)) +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5)) +
facet_wrap(~Asset_Type)
agg_revenues <- aggregate(cbind(Actual, Budget) ~ Year + Revenue_Type, metra_revenues, FUN=sum)
ggplot(subset(agg_revenues, grepl("^((?!Total).)*$", Revenue_Type, perl=TRUE)),
aes(Year, Actual, color=Revenue_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Revenues - Amount", x="Year", y="Amount") +
guides(color=guide_legend(nrow=6)) +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
agg_revenues <- aggregate(cbind(Actual, Budget) ~ Year + Revenue_Type, metra_revenues, FUN=sum)
ggplot(subset(agg_revenues, grepl("^((?!Total).)*$", Revenue_Type, perl=TRUE)),
aes(Year, Actual, color=Revenue_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Revenues - Amount", x="Year", y="Amount") +
guides(color=guide_legend(nrow=7)) +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
agg_revenues <- aggregate(cbind(Actual, Budget) ~ Year + Revenue_Type, metra_revenues, FUN=sum)
ggplot(subset(agg_revenues, grepl("^((?!Total).)*$", Revenue_Type, perl=TRUE)),
aes(Year, Actual, color=Revenue_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Revenues - Amount", x="Year", y="Amount") +
guides(color=guide_legend(ncol=3)) +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
setwd('/home/parfaitg/Documents/MISC/DATA/METRA')
# ASSETS
metra_assets <- read.csv('MetraAssets.csv', stringsAsFactors = FALSE)
# FUNDING
metra_funding <- read.csv('MetraFunding.csv', stringsAsFactors = FALSE)
# REVENUES
metra_revenues <- read.csv('MetraRevenues.csv', stringsAsFactors = FALSE)
metra_revenues <- within(subset(metra_revenues, !is.na(Category) | Category != ''), {
Budget <- as.numeric(metra_revenues$Final.Budget)
Actual <- as.numeric(metra_revenues$Actual)
Revenue_Type <- ifelse(grepl("Loss before depreciation", Revenue_Type),
"Loss before depreciation, etc.",
Revenue_Type)
Final.Budget <- NULL
})
# RIDERSHIP
metra_ridership <- read.csv('MetraRidership.csv', stringsAsFactors = FALSE)
agg_assets <- transform(aggregate(End_Balance ~ Asset_Type, metra_assets, FUN=sum),
End_Balance = scales::dollar(End_Balance))
agg_assets
agg_funding <- transform(aggregate(Amount ~ Funding_Source, metra_funding, FUN=sum),
Amount = scales::dollar(Amount))
agg_funding
agg_revenues <-transform(aggregate(Actual ~ Revenue_Type, metra_revenues, FUN=sum),
Actual = scales::dollar(Actual))
agg_revenues
agg_rides <- transform(aggregate(Rides ~ Rail_Line, metra_ridership, FUN=sum),
Rides = scales::comma(Rides))
agg_rides
agg_revenues <- aggregate(cbind(Actual, Budget) ~ Year + Revenue_Type, metra_revenues, FUN=sum)
ggplot(subset(agg_revenues, grepl("^((?!Total).)*$", Revenue_Type, perl=TRUE)),
aes(Year, Actual, color=Revenue_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Revenues - Amount", x="Year", y="Amount") +
guides(color=guide_legend(ncol=3)) +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
long_revenues <- rbind(transform(agg_revenues[, c(1:3)],
Amount_Type = 'Actual', Amount = Actual, Actual = NULL),
transform(agg_revenues[, c(1:2,4)],
Amount_Type = 'Budget', Amount = Budget, Budget = NULL))
ggplot(subset(long_revenues, grepl("Total", Revenue_Type)),
aes(Year, Amount, fill=Amount_Type)) +
geom_col(position = "dodge") +
labs(title="Metra Amount Types - Totals", x="Year", y="Amount") +
guides(fill=guide_legend(nrow=1)) +
scale_x_continuous(breaks=unique(long_revenues$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_fill_manual(values = seaborn_palette) +
theme(legend.position="top",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
agg_revenues <- aggregate(cbind(Actual, Budget) ~ Year + Revenue_Type, metra_revenues, FUN=sum)
ggplot(subset(agg_revenues, grepl("^((?!Total).)*$", Revenue_Type, perl=TRUE)),
aes(Year, Actual, color=Revenue_Type)) +
geom_line(stat="identity") + geom_point(stat="identity") +
labs(title="Metra Revenues - Amount", x="Year", y="Amount") +
guides(color=guide_legend(ncol=4)) +
scale_x_continuous(breaks=unique(agg_assets$Year)) +
scale_y_continuous(expand = c(0, 0), label=comma) +
scale_color_manual(values = seaborn_palette) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5, size=18),
axis.text.x = element_text(angle=0, hjust=0.5))
random_data <- data.frame(
tools = sample(c("sas", "stata", "spss", "python", "r", "julia"), 500, replace=TRUE),
databases = sample(c("oracle", "db2", "mssql", "postgres", "mysql", "sqlite"), 500, replace=TRUE),
num = runif(500, 0, 100),
CHAR = replicate(500, paste(sample(alpha, 3, replace=TRUE), collapse="")),
BOOL = sample(c(TRUE, FALSE), 500, replace=TRUE),
DATE = as.Date(sample(as.integer(as.Date('2000-01-01')):as.integer(Sys.Date()),
500, replace=TRUE), origin="1970-01-01")
)
random_data <- data.frame(
tools = sample(c("sas", "stata", "spss", "python", "r", "julia"), 500, replace=TRUE),
databases = sample(c("oracle", "db2", "mssql", "postgres", "mysql", "sqlite"), 500, replace=TRUE),
num = runif(500, 0, 100),
date = as.Date(sample(as.integer(as.Date('2000-01-01')):as.integer(Sys.Date()),
500, replace=TRUE), origin="1970-01-01")
)
View(random_data)
random_data <- data.frame(
tools = sample(c("sas", "stata", "spss", "python", "r", "julia"), 500, replace=TRUE),
databases = sample(c("oracle", "db2", "mssql", "postgres", "mysql", "sqlite"), 500, replace=TRUE),
num = runif(500, 0, 100),
date = as.Date(sample(as.integer(as.Date('2000-01-01')):as.integer(Sys.Date()),
500, replace=TRUE), origin="1970-01-01")
)
with(random_data, tapply(num, tools, mean))
random_data <- data.frame(
tool = sample(c("sas", "stata", "spss", "python", "r", "julia"), 500, replace=TRUE),
database = sample(c("oracle", "db2", "mssql", "postgres", "mysql", "sqlite"), 500, replace=TRUE),
num = runif(500, 0, 100),
date = as.Date(sample(as.integer(as.Date('2000-01-01')):as.integer(Sys.Date()),
500, replace=TRUE), origin="1970-01-01")
)
with(random_data, tapply(num, tools, mean))
random_data <- data.frame(
tool = sample(c("sas", "stata", "spss", "python", "r", "julia"), 500, replace=TRUE),
database = sample(c("oracle", "db2", "mssql", "postgres", "mysql", "sqlite"), 500, replace=TRUE),
num = runif(500, 0, 100),
date = as.Date(sample(as.integer(as.Date('2000-01-01')):as.integer(Sys.Date()),
500, replace=TRUE), origin="1970-01-01")
)
with(random_data, tapply(num, tool, mean))
with(random_data, tapply(num, list(tool, database), mean))
?by
# LONG FORM WITH ARG
by(random_data, random_data$tool, function(sub) summary(sub))
# SHORT FORM WITHOUT ARG
by(random_data, random_data$tool, summary)
# LONG FORM WITH ARG
by(random_data, random_data$tool, function(sub) summary(sub))
# SHORT FORM WITHOUT ARG
# by(random_data, random_data$tool, summary)
# LONG FORM WITH ARG
summary_list <- by(random_data, random_data$tool, function(sub) summary(sub))
# SHORT FORM WITHOUT ARG
summary_list <- by(random_data, random_data$tool, summary)
summary_list
random_data <- data.frame(
tool = sample(c("sas", "stata", "spss", "python", "r", "julia"), 500, replace=TRUE),
database = sample(c("oracle", "db2", "mssql", "postgres", "mysql", "sqlite"), 500, replace=TRUE),
num1 = runif(500, 0, 100),
num2 = rnorm(500, 100, 2),
date = as.Date(sample(as.integer(as.Date('2000-01-01')):as.integer(Sys.Date()),
500, replace=TRUE), origin="1970-01-01")
)
with(random_data, tapply(num, tool, mean))
random_data <- data.frame(
tool = sample(c("sas", "stata", "spss", "python", "r", "julia"), 500, replace=TRUE),
database = sample(c("oracle", "db2", "mssql", "postgres", "mysql", "sqlite"), 500, replace=TRUE),
num1 = runif(500, 0, 100),
num2 = rnorm(500, 100, 2),
date = as.Date(sample(as.integer(as.Date('2000-01-01')):as.integer(Sys.Date()),
500, replace=TRUE), origin="1970-01-01")
)
with(random_data, tapply(num1, tool, mean))
View(random_data)
# LONG FORM WITH ARG
summary_list <- by(random_data, random_data$tool, function(sub) summary(sub))
# SHORT FORM WITHOUT ARG
summary_list <- by(random_data, random_data$tool, summary)
summary_list
by(random_data, random_data$tool, function(sub)
t.test(num1 ~ num2, sub)
)
random_data <- data.frame(
tool = sample(c("sas", "stata", "spss", "python", "r", "julia"), 500, replace=TRUE),
database = sample(c("oracle", "db2", "mssql", "postgres", "mysql", "sqlite"), 500, replace=TRUE),
num1 = runif(500, 0, 100),
num2 = rnorm(500, 100, 2),
bool = sample(c(TRUE, FALSE), 500, replace=TRUE)
date = as.Date(sample(as.integer(as.Date('2000-01-01')):as.integer(Sys.Date()),
random_data <- data.frame(
tool = sample(c("sas", "stata", "spss", "python", "r", "julia"), 500, replace=TRUE),
database = sample(c("oracle", "db2", "mssql", "postgres", "mysql", "sqlite"), 500, replace=TRUE),
num1 = runif(500, 0, 100),
num2 = rnorm(500, 100, 2),
bool = sample(c(TRUE, FALSE), 500, replace=TRUE),
date = as.Date(sample(as.integer(as.Date('2000-01-01')):as.integer(Sys.Date()),
500, replace=TRUE), origin="1970-01-01")
)
with(random_data, tapply(num1, tool, mean))
by(random_data, random_data$tool, function(sub)
t.test(num1 ~ bool, sub)
)
?cor.test
by(random_data, random_data$tool, function(sub)
cor.test(sub$num1, sub$num1, sub)
)
by(random_data, random_data$tool, function(sub)
cor.test(sub$num1, sub$num1, method="spearman")
)
### METRA RIDERSHIP
setwd('/home/parfaitg/Documents/MISC/DATA/METRA')
metra_ridership <- read.csv('MetraRidership.csv', stringsAsFactors = FALSE)
with(metra_ridership, tapply(Ridership, Year, mean))
### METRA RIDERSHIP
setwd('/home/parfaitg/Documents/MISC/DATA/METRA')
metra_ridership <- read.csv('MetraRidership.csv', stringsAsFactors = FALSE)
with(metra_ridership, tapply(Rides, Rail_Line, mean))
### METRA RIDERSHIP
setwd('/home/parfaitg/Documents/MISC/DATA/METRA')
metra_ridership <- read.csv('MetraRidership.csv', stringsAsFactors = FALSE)
with(metra_ridership, tapply(Rides, Rail_Line, mean))
### METRA RIDERSHIP
metra_ridership <- read.csv('MetraRidership.csv', stringsAsFactors = FALSE)
setwd('/home/parfaitg/Documents/MISC/DATA/METRA')
### METRA RIDERSHIP
metra_ridership <- read.csv('MetraRidership.csv', stringsAsFactors = FALSE)
### METRA RIDERSHIP
metra_ridership <- read.csv('/home/parfaitg/Documents/MISC/DATA/METRA/MetraRidership.csv', stringsAsFactors = FALSE)
with(metra_ridership, tapply(Rides, Rail_Line, mean))
with(metra_ridership, tapply(Rides, list(Rail_Line, Year), mean))
# LONG FORM WITH ARG
summary_list <- by(metra_ridership, metra_ridership$Rail_Line, function(sub) summary(sub))
# SHORT FORM WITHOUT ARG
summary_list <- by(metra_ridership, metra_ridership$Rail_Line, summary)
summary_list
by(random_data, random_data$tool, function(sub) sub[sample(sub, 10),])
by(random_data, random_data$tool, function(sub) sub[sample(nrow(sub), 10),])
by(metra_ridership, metra_ridership$Rail_Line, function(sub) sub[sample(nrow(sub), 10),])
by(metra_ridership, metra_ridership$Rail_Line, function(sub) sub[sample(nrow(sub), 5),])
df_list <- by(metra_ridership, metra_ridership$Rail_Line, function(sub) sub[sample(nrow(sub), 5),])
df_list
random_metra <- do.call(rbind, df_list)
ranomd_metra
df_list <- by(metra_ridership, metra_ridership$Rail_Line, function(sub) sub[sample(nrow(sub), 5),])
df_list
random_metra <- do.call(rbind, df_list)
random_metra
df_list <- by(metra_ridership, metra_ridership$Rail_Line, function(sub) sub[sample(nrow(sub), 5),])
df_list
random_metra <- do.call(rbind, unname(df_list))
random_metra
?corr
?cor
by(random_data, random_data$tool, function(sub)
cor(sub$num1, sub$num1, method="spearman")
)
by(random_data, random_data$tool, function(sub)
bar_plot(tapply(sub$Riders, list(sub$Rail_Line, sub$Year), sum))
)
by(random_data, random_data$tool, function(sub)
barplot(tapply(sub$Riders, list(sub$Rail_Line, sub$Year), sum))
)
by(random_data, random_data$tool, function(sub)
barplot(tapply(sub$Rides, list(sub$Rail_Line, sub$Year), sum))
)
by(metra_ridership, metra_ridership$Rail_Line, function(sub)
barplot(tapply(sub$Rides, sub$Year, sum))
)
plots <- by(metra_ridership, metra_ridership$Rail_Line, function(sub)
barplot(tapply(sub$Rides, sub$Year, sum))
)
plots <- by(metra_ridership, metra_ridership$Rail_Line, function(sub)
barplot(tapply(sub$Rides, sub$Year, sum), col=rainbow(11))
)
plots <- by(metra_ridership, metra_ridership$Rail_Line, function(sub)
barplot(tapply(sub$Rides, sub$Year, sum), col=rainbow(11),
main=sub$Rail_Line[[1]], ylab="Rides", xlab="Year")
)
